#!/usr/bin/zsh

#------------------------------------------////
# History & general
#------------------------------------------////
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt append_history       # add history entries as they are used
setopt inc_append_history   # as above, per line
# setopt share_history      # use fc -RI instead
setopt extended_history     # store date and duration
setopt hist_ignore_dups     # replace older dups with newer executions
setopt hist_ignore_space    # ignore ' cmd' from history
setopt hist_verify          # allow editing of line after history expansion

setopt interactive_comments # allow comments in interactive shells

# Allow more globbing, and if there's no match let user know
setopt extendedglob nomatch
unsetopt beep

# auto pushd on cd
# Useful with aliasing .=popd
# . can just act as a "back" button
setopt pushd_silent auto_pushd pushd_ignore_dups

# disable ^S/^Q for flow control
setopt noflowcontrol

#------------------------------------------////
# Bindings
#------------------------------------------////

# Allow for vim-mode. -e for emacs.
bindkey -v
bindkey -M viins 'jk'    vi-cmd-mode

# But we still want normal cli binds
bindkey -M viins '^a'    beginning-of-line
bindkey -M viins '^e'    end-of-line
bindkey -M vicmd '^a'    beginning-of-line
bindkey -M vicmd '^e'    end-of-line

# ssh <C-j> searches commands beginning with ssh.
bindkey -M viins '^k'    history-beginning-search-forward
bindkey -M viins '^j'    history-beginning-search-backward
bindkey -M viins '^n'    history-beginning-search-forward
bindkey -M viins '^p'    history-beginning-search-backward

# and regular function keys to work.
bindkey -M viins "^[[1~" vi-beginning-of-line   # Home
bindkey -M viins "^[[4~" vi-end-of-line         # End
bindkey -M viins '^[[2~' beep                   # Insert
bindkey -M viins '^[[3~' delete-char            # Del
bindkey -M vicmd "^[[1~" vi-beginning-of-line
bindkey -M vicmd "^[[4~" vi-end-of-line
bindkey -M vicmd '^[[2~' beep
bindkey -M vicmd 'q'     edit-command-line

autoload zmv  # zmv with no clargs shows example usage
autoload edit-command-line
zle -N edit-command-line

# Mmm. Vim.
export EDITOR=$(command -v vim)
export VISUAL=$(command -v vim)

#------------------------------------------////
# fzf
#------------------------------------------////

# must be after vi mode declaration!
if [[ -d "$HOME/local/src/fzf" ]]; then
  fzf-history-widget-to-ins() {
    zle fzf-history-widget
    zle vi-end-of-line
    zle vi-insert
  }
  zle -N fzf-history-widget-to-ins
  bindkey -M vicmd '/' fzf-history-widget-to-ins

  [[ $- == *i* ]] && source "$HOME/local/src/fzf/shell/completion.zsh" 2> /dev/null
  source "$HOME/local/src/fzf/shell/key-bindings.zsh"
fi

#------------------------------------------////
# Color man pages
#------------------------------------------////

export LESS_TERMCAP_mb=$'\E[01;31m'      # begin blinkin
export LESS_TERMCAP_md=$'\E[01;31m'      # begin bold
export LESS_TERMCAP_me=$'\E[0m'          # end mode
export LESS_TERMCAP_se=$'\E[0m'          # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'   # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'          # end underline
export LESS_TERMCAP_us=$'\E[01;32m'      # begin underline

#------------------------------------------////
# Aliases
#------------------------------------------////
alias zmv='noglob zmv'

[ -f $HOME/.zshrc.local ] && source $HOME/.zshrc.local
#

#------------------------------------------////
# Terminal title settings
#------------------------------------------////

# TODO: when executing a command, rename title?
precmd () {print -Pn "\e]0;%n@%m: %~\a"}

#------------------------------------------////
# Completion options
#------------------------------------------////
autoload -Uz compinit && compinit

zmodload -i zsh/complist    # colored menu for completion
setopt complete_in_word
setopt always_to_end
unsetopt menu_complete

# should this be in keybindings?
bindkey -M menuselect '^o' accept-and-infer-next-history

# see http://zsh.sourceforge.net/Doc/Release/Completion-Widgets.html
#
# Completion options: ignore case, approximately correct, ignore a few
# errors, don't go to menu if unambiguous, but go to menu if ambiguious.
zstyle ':completion:*' completer _complete _ignored _correct _approximate
zstyle ':completion:*' expand prefix
zstyle ':completion:*' ignore-parents parent pwd .. directory
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' max-errors 1
zstyle ':completion:*' menu select
zstyle ':completion:*' original true

# Cache so things like apt and anything on a slow server aren't awful to use
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path $HOME/.cache/zsh

# From oh-my-zsh
# Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
    adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
    clamav colord daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
    gkrellmd gnats gopher hacluster haldaemon halt hplip hsqldb ident irc \
    junkbust kdm kernoops ldap libuuid lightdm lp mail mailman mailnull \
    man messagebus mldonkey mysql nagios named netdump news nfsnobody \
    nobody nscd ntp nut nx obsrun openvpn operator pcap polkitd postfix \
    postgres privoxy proxy pulse pvm quagga radvd rpc rpcuser rpm rtkit \
    saned scard shutdown snmp squid sshd statd svn sync sys syslog tftp \
    usbmux uucp vcsa whoopsie www-data wwwrun xfs '*server' '_*'
zstyle '*' single-ignored show  # ... unless we really want to.

# What does this do?
zstyle :compinstall filename "$HOME/.zshrc"
#

autoload -Uz colors && colors

source ${0:a:h}/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWCOLORHINTS=1

setopt prompt_subst
PROMPT='
%{%B%F{blue}%}#%{%f%b%} \
%(#,%{%K{yellow}%F{black}%n%k%f%},%F{cyan}%n%f) \
%{%F{white}%}@ \
%{%F{green}%}%m \
%{%F{white}%}in \
%{%B%F{yellow}%}%~%{%f%b%} \
$(__git_ps1 "%%F{white}on%%f git:%s ")\
%{%F{white}%}[%*] \
%(?,,C:%{%F{red}%}%?%{%f%})
%{%B%F{red}%}$%{%f%b%} %{$reset_color%}'
#

#------------------------------------------////
# Functions
#------------------------------------------////
alias open=open_command
    function open_command() {
    emulate -L zsh
    setopt shwordsplit

    local open_cmd exit_code

    # define the open command
    case "$OSTYPE" in
        darwin*)    open_cmd='open' ;;
        linux*)     open_cmd='xdg-open' ;;
        *)          echo "Platform $OSTYPE not supported"
                    return 1
                    ;;
    esac

    # don't use nohup on OSX
    if [[ "$OSTYPE" == darwin* ]]; then
        $open_cmd "$@" &>/dev/null
    else
        nohup $open_cmd "$@" &>/dev/null
    fi
    exit_code=$?
    if [[ "$retval" -ne 0 ]]; then
        echo "Exit: $?"
    fi
}
#

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

local orginial_dir=$PWD
source ${0:a:h}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

ZSH_HIGHLIGHT_STYLES[globbing]=fg=blue,bold
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue,bold
ZSH_HIGHLIGHT_STYLES[bracket-level-1]=fg=blue,bold
ZSH_HIGHLIGHT_STYLES[path]=none
